"use strict";var _require=require("util"),promisify=_require.promisify,jwt=require("jsonwebtoken"),User=require("../models/userModel"),catchAsync=require("./../utils/catchAsync"),AppError=require("./../utils/appError"),signToken=function(e){return jwt.sign({id:e},process.env.JWT_SECRET,{expiresIn:process.env.JWT_EXPIRES_IN})};exports.signup=catchAsync(function(r,t){var n,s;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(User.create({name:r.body.name,email:r.body.email,password:r.body.password,passwordConfirm:r.body.passwordConfirm,passwordChangedAt:r.body.passwordChangedAt}));case 2:n=e.sent,s=signToken(n._id),t.status(201).json({status:"success",token:s,data:{user:n}});case 5:case"end":return e.stop()}})}),exports.login=catchAsync(function(r,t,n){var s,a,o,i,c;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(s=r.body,a=s.email,o=s.password,a&&o){e.next=3;break}return e.abrupt("return",n(new AppError("Please provide email and password!",400)));case 3:return e.next=5,regeneratorRuntime.awrap(User.findOne({email:a}).select("+password"));case 5:if(i=e.sent,e.t0=!i,e.t0){e.next=11;break}return e.next=10,regeneratorRuntime.awrap(i.correctPassword(o,i.password));case 10:e.t0=!e.sent;case 11:if(e.t0)return e.abrupt("return",n(new AppError("Incorrect email or password",401)));e.next=13;break;case 13:c=signToken(i._id),t.status(200).json({status:"success",token:c});case 15:case"end":return e.stop()}})}),exports.protect=catchAsync(function(r,e,t){var n,s,a;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(r.headers.authorization&&r.headers.authorization.startsWith("Bearer")&&(n=r.headers.authorization.split(" ")[1]),n){e.next=3;break}return e.abrupt("return",t(new AppError("Your are not logged in! Please log in to get access.",401)));case 3:return e.next=5,regeneratorRuntime.awrap(promisify(jwt.verify)(n,process.env.JWT_SECRET));case 5:return s=e.sent,e.next=8,regeneratorRuntime.awrap(User.findById(s.id));case 8:if(a=e.sent){e.next=11;break}return e.abrupt("return",t(new AppError("The user belonging to this token does not longer exist.",401)));case 11:if(a.changedPasswordAfter(s.iat))return e.abrupt("return",t(new AppError("User recently changed password! Please log in again.",401)));e.next=13;break;case 13:r.user=a,t();case 15:case"end":return e.stop()}})});